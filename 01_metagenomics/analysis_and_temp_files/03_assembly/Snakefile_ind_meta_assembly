#

#Snakefile for individual assemblies of xanthoria metagenomes

import pandas as pd
import re
from os.path import join
#configfile: "code/params/config.yaml"

#load table with metadata
input_table = pd.read_csv("data/metadata/fastq_files_metadata.txt", sep="\t").set_index("run_id", drop=False)
SAMPLES = input_table.index.tolist()
#SAMPLES=["GTX0465","GTX0466"]

rule all:
    input:
    	expand("analysis_and_temp_files/03_assembly/{sample}_megahit/its_blast.fa",sample=SAMPLES),
        "analysis_and_temp_files/03_assembly/its_all.fa_aligned.phyl.iqtree",
    	expand("analysis_and_temp_files/03_assembly/{sample}_megahit/final.contigs.fa",sample=SAMPLES),
    	expand("analysis_and_temp_files/03_assembly/{sample}_megahit/eukaryotic_MAGs_table.txt",sample=SAMPLES),
    	expand("analysis_and_temp_files/03_assembly/{sample}_megahit/prokaryotic_MAGs_table.txt",sample=SAMPLES),
    	"analysis_and_temp_files/03_assembly/ind_assembly_MAGs_table.txt",
    	"analysis_and_temp_files/03_assembly/ind_assembly_bins/gtdb_out/gtdbtk.bac120.user_msa.fasta.iqtree" ,
    	expand("analysis_and_temp_files/03_assembly/{sample}_megahit/{sample}_gc.txt",sample=SAMPLES)


# assembly
rule megahit:
    input:
        fq1="data/fastq/{sample}_trimmed.1.fq.gz",
        fq2="data/fastq/{sample}_trimmed.2.fq.gz"
    output: "analysis_and_temp_files/03_assembly/{sample}_megahit/final.contigs.fa"
    params:
        mem = "80G",
        queue="tsl-medium",
        time="3-0:0:0"
    threads: 20	
    shell: "code/megahit.sh {input.fq1} {input.fq2} analysis_and_temp_files/03_assembly/{wildcards.sample}_megahit"

# make gc content
rule gc_content:
	input: "analysis_and_temp_files/03_assembly/{sample}_megahit/final.contigs.fa"
	output: "analysis_and_temp_files/03_assembly/{sample}_megahit/{sample}_gc.txt"
    params:
        mem = "1G",
        queue="tsl-short",
        time="1:0:0"
    threads: 1	
    shell: "code/calculate_gc.sh {input} {output}"
	


# extract ITS from each assembly
rule extract:
    input: "analysis_and_temp_files/03_assembly/{sample}_megahit/final.contigs.fa"
    output: "analysis_and_temp_files/03_assembly/{sample}_megahit/its_blast.fa"
    params:
        mem = "1G",
        queue="tsl-short"
    threads: 1    
    shell: "bash code/extract_its.sh ../02_long_read_assemblies/analysis_and_temp_files/04_xanthoria_mag/GTX0491_its.fa {input} {output} {wildcards.sample}"
    
# combine with sequences from genbank and make a tree
rule cat:
    input: expand("analysis_and_temp_files/03_assembly/{sample}_megahit/its_blast.fa",sample=SAMPLES)
    output: "analysis_and_temp_files/03_assembly/its_all.fa"   
    params:
        mem = "1G",
        queue="tsl-short"
    threads: 1    
    shell: "cat {input} ../02_long_read_assemblies/analysis_and_temp_files/04_xanthoria_mag/genbank_its.fasta > {output}"

rule align:
    input: "analysis_and_temp_files/03_assembly/its_all.fa" 
    output: "analysis_and_temp_files/03_assembly/its_all.fa_aligned.phyl"      
    params:
        mem = "1G",
        queue="tsl-short"
    threads: 5     
    shell: "bash code/align.sh {input}  {threads}"
   
rule tree:
    input: "analysis_and_temp_files/03_assembly/its_all.fa_aligned.phyl"   
    output: "analysis_and_temp_files/03_assembly/its_all.fa_aligned.phyl.iqtree"      
    params:
        mem = "15G",
        queue="tsl-short"
    threads: 20   
    shell: "bash code/iqtree.sh {input}  {threads} 10000"   
    
#bin individual metagenomes
rule index_assembly:
    input: "analysis_and_temp_files/03_assembly/{sample}_megahit/final.contigs.fa"
    output: "analysis_and_temp_files/03_assembly/{sample}_megahit/index_done.tmp"
    params:
        mem = "15G",
        queue="tsl-short",
        time="1:0:0"
    threads: 1  
    shell: "bash code/bowtie_index.sh {input} {output}"     

rule align_reads:
    input:
        fq1="data/fastq/{sample}_trimmed.1.fq.gz",
        fq2="data/fastq/{sample}_trimmed.2.fq.gz",
        index="analysis_and_temp_files/03_assembly/{sample}_megahit/index_done.tmp"
    output: "analysis_and_temp_files/03_assembly/{sample}_megahit/{sample}.bam"
    params:
        mem = "40G",
        queue="tsl-short",
        time="6:0:0"
    threads: 20	
    shell: "code/align_read.sh analysis_and_temp_files/03_assembly/{wildcards.sample}_megahit/index {input.fq1} {input.fq2} analysis_and_temp_files/03_assembly/{wildcards.sample}_megahit/{wildcards.sample} {threads}"

rule metabat:
    input: 
        assembly="analysis_and_temp_files/03_assembly/{sample}_megahit/final.contigs.fa",
        bam="analysis_and_temp_files/03_assembly/{sample}_megahit/{sample}.bam"
    output: 
        bins="analysis_and_temp_files/03_assembly/{sample}_megahit/binning_done.tmp",
        cov="analysis_and_temp_files/03_assembly/{sample}_megahit/final.contigs.fa.cov"
    params:
        mem = "50G",
        queue="tsl-medium",
        time="3-0:0:0"
    threads: 20	    
    shell: "code/metabat_ind.sh {input.assembly} {threads} {input.bam}"
    
#identify MAGs
rule checkm:
    input: "analysis_and_temp_files/03_assembly/{sample}_megahit/binning_done.tmp",
    output: "analysis_and_temp_files/03_assembly/{sample}_megahit/checkm_qa.tab"
    params:
        mem = "80G",
        queue="tsl-short",
        time="6:0:0"
    threads: 20	
    shell: "code/checkm.sh analysis_and_temp_files/03_assembly/{wildcards.sample}_megahit/final.contigs.fa.metabat analysis_and_temp_files/03_assembly/{wildcards.sample}_megahit/checkm_output_folder {output} {threads}"

rule eukcc:
    input: "analysis_and_temp_files/03_assembly/{sample}_megahit/binning_done.tmp"
    output: "analysis_and_temp_files/03_assembly/{sample}_megahit/eukcc_out/eukcc.csv"
    params:
        mem = "40G",
        queue="tsl-short",
        time="6:0:0"
    threads: 20  	
    shell: 
        """
        bash code/eukcc.sh analysis_and_temp_files/03_assembly/{wildcards.sample}_megahit/final.contigs.fa.metabat/ {output} analysis_and_temp_files/03_assembly/{wildcards.sample}_megahit analysis_and_temp_files/03_assembly/{wildcards.sample}_megahit/linktable.csv 20;
        mv analysis_and_temp_files/03_assembly/{wildcards.sample}_megahit/eukcc_out/merged_bins/*fa analysis_and_temp_files/03_assembly/{wildcards.sample}_megahit/final.contigs.fa.metabat/ 
        """
    
#dereplicate MAGs
rule list_prok_mags:
    input: 
    	i="analysis_and_temp_files/03_assembly/{sample}_megahit/checkm_qa.tab"
    output: 
    	table="analysis_and_temp_files/03_assembly/{sample}_megahit/prokaryotic_MAGs_table.txt",
    	fastas="analysis_and_temp_files/03_assembly/{sample}_megahit/prokaryotic_MAGs_fastas.txt",
    params:
        mem = "1G",
        queue="tsl-short",
        time="0:1:0"
    threads: 1	
    run:
    	df=pd.read_csv(input.i, sep="\t")
    	df['genome'] = "analysis_and_temp_files/03_assembly/ind_assembly_bins/" +  wildcards.sample + "." + df['Bin Id'].astype(str) + ".fa"
    	df['completeness'] = df['Completeness']
    	df['contamination'] = df['Contamination']
    	newdf2 = df[(df.completeness >=50) & (df.contamination<10)][["genome","completeness","contamination"]]
    	newdf2.to_csv(output.table, header=False, index=False,sep=",")
    	newdf3 = df[(df.completeness >=50) & (df.contamination<10)][["genome"]]
    	newdf3.to_csv(output.fastas, header=False, index=False,sep="\t")

    
rule list_euk_mags:
    input: 
        i="analysis_and_temp_files/03_assembly/{sample}_megahit/eukcc_out/eukcc.csv"
    output: 
        table="analysis_and_temp_files/03_assembly/{sample}_megahit/eukaryotic_MAGs_table.txt",
        fastas="analysis_and_temp_files/03_assembly/{sample}_megahit/eukaryotic_MAGs_fastas.txt",
    params:
        mem = "1G",
        queue="tsl-short",
        time="0:1:0"
    threads: 1	
    run:
    	df=pd.read_csv(input.i, sep="\t")
    	df['genome'] = "analysis_and_temp_files/03_assembly/ind_assembly_bins/" +  wildcards.sample + "." + df['bin'].astype(str)
    	newdf = df[(df.completeness >=50) & (df.contamination<10)][["genome","completeness","contamination"]]
    	newdf.to_csv(output.table, header=False, index=False,sep=",")
    	newdf2 = df[(df.completeness >=50) & (df.contamination<10)][["genome"]]
    	newdf2.to_csv(output.fastas, header=False, index=False,sep="\t")

rule list_all:
    input:
        euk_table=expand("analysis_and_temp_files/03_assembly/{sample}_megahit/eukaryotic_MAGs_table.txt",sample=SAMPLES),
        prok_table=expand("analysis_and_temp_files/03_assembly/{sample}_megahit/prokaryotic_MAGs_table.txt",sample=SAMPLES),
        euk_fastas=expand("analysis_and_temp_files/03_assembly/{sample}_megahit/eukaryotic_MAGs_fastas.txt",sample=SAMPLES),
        prok_fastas=expand("analysis_and_temp_files/03_assembly/{sample}_megahit/prokaryotic_MAGs_fastas.txt",sample=SAMPLES)
    output:
        table="analysis_and_temp_files/03_assembly/ind_assembly_MAGs_table.txt",
        fastas="analysis_and_temp_files/03_assembly/ind_assembly_MAGs_fastas.txt",
        prok_list="analysis_and_temp_files/03_assembly/ind_assembly_prok_MAGs_fastas.txt" 
    params:
        mem = "1G",
        queue="tsl-short",
        time="0:1:0"
    threads: 1
    shell:
        r"""
        cat {input.euk_fastas} {input.prok_fastas} > {output.fastas};
        cat {input.euk_table} {input.prok_table} > {output.table};
        cat {input.prok_fastas} > {output.prok_list};
        sed -i "1s/^/genome,completeness,contamination\n/" {output.table}
        """   

rule move_bins:
    input: "analysis_and_temp_files/03_assembly/{sample}_megahit/binning_done.tmp"
    output: "analysis_and_temp_files/03_assembly/ind_assembly_bins/{sample}.bin.1.fa"
    params:
        mem = "1G",
        queue="tsl-short",
        time="0:30:0"
    threads: 1
    shell:
        r"""
        mkdir -p analysis_and_temp_files/03_assembly/ind_assembly_bins
        for file in analysis_and_temp_files/03_assembly/{wildcards.sample}_megahit/final.contigs.fa.metabat/*fa; do filename=$(basename ${{file}}); cp "$file" analysis_and_temp_files/03_assembly/ind_assembly_bins/{wildcards.sample}."$filename"; done;
        """
        
rule drep:
    input: 
        table="analysis_and_temp_files/03_assembly/ind_assembly_MAGs_table.txt",
        fastas="analysis_and_temp_files/03_assembly/ind_assembly_MAGs_fastas.txt",
        bins=expand("analysis_and_temp_files/03_assembly/ind_assembly_bins/{sample}.bin.1.fa",sample=SAMPLES)
    output: "analysis_and_temp_files/03_assembly/ind_assembly_bins/drep/data_tables/Wdb.csv"
    params:
        mem = "25G",
        queue="tsl-short",
        time="6:0:0"
    threads: 20  	
    shell: 
        """
        source package  cfe4697f-e720-4a2b-a5a2-6fe645f39f34
        dRep dereplicate -p {threads} analysis_and_temp_files/03_assembly/ind_assembly_bins/drep -g {input.fastas}  -pa 0.80 -sa 0.95 -nc 0.40 -cm larger --genomeInfo {input.table} -comp 49 -con 21
        """
        
# taxonomic assignment for prokaryotic bins
## prepare input table for gtdb-tk, include only prokaryotic mags that survived dereplication
rule get_derepl_bac:
    input: 
        drep_list="analysis_and_temp_files/03_assembly/ind_assembly_bins/drep/data_tables/Wdb.csv",
        prok_list="analysis_and_temp_files/03_assembly/ind_assembly_prok_MAGs_fastas.txt"
    output: 
    	o="analysis_and_temp_files/03_assembly/ind_assembly_bins/drep/prok_MAGs_dereplicated_list.txt"
    params:
        mem = "1G",
        queue="tsl-short",
        time="0:1:0"
    threads: 1	
    run:
    	df=pd.read_csv(input.drep_list, sep=",")
    	df['fasta'] = "analysis_and_temp_files/03_assembly/ind_assembly_bins/" +  df['genome'].astype(str) 
    	newdf = df[["fasta","genome"]]
    	prok_list=pd.read_csv(input.prok_list, sep=",",header=None)
    	l = prok_list[0].tolist()
    	newdf = newdf[newdf['fasta'].isin(l)]
    	newdf.to_csv(output.o, header=False, index=False,sep="\t")

#annotate with GTDB
rule gtdb:
    input: "analysis_and_temp_files/03_assembly/ind_assembly_bins/drep/prok_MAGs_dereplicated_list.txt"
    output: "analysis_and_temp_files/03_assembly/ind_assembly_bins/gtdb_out/touch.tmp"
    params:
        mem = "340G",
        queue="tsl-medium",
        time="3-0:0:0"
    threads: 20	
    shell: "bash code/gtdb.sh {input} {output} --batchfile {threads}"

#tree the prokaryotes
rule gtdb_tree:
    input: "analysis_and_temp_files/03_assembly/ind_assembly_bins/gtdb_out/touch.tmp"   
    output: "analysis_and_temp_files/03_assembly/ind_assembly_bins/gtdb_out/gtdbtk.bac120.user_msa.fasta.iqtree"      
    params:
        mem = "25G",
        queue="tsl-short",
        time="3-0:0:0"        
    threads: 20   
    shell: "bash code/iqtree.sh analysis_and_temp_files/03_assembly/ind_assembly_bins/gtdb_out/gtdbtk.bac120.user_msa.fasta  {threads} 1000"   
   




    