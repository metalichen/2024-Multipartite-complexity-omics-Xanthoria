#Snakefile for mapping transcriptomic lichen data to the two X.parietina transcriptomes

import pandas as pd
import re


#load table with metadata
input_table = pd.read_csv("data/metadata/bmm_coculture_thallus.csv").set_index("run_id", drop=False)
SAMPLES=["XBC2","XBA1","XSA2_2","XSC1","XSE2","XBE1","XTA2","XSC2","XSA2","XBA2","XBC1","XTA1","XSA1","MP_I","XTC2","XTE2","XBE2","XMC2","MP_II"]

#define functions, by which I will get file locations for each ran from the table
def fq1_from_sample(wildcards):
  return input_table.loc[wildcards.sample, "fq1"]

def fq2_from_sample(wildcards):
  return input_table.loc[wildcards.sample, "fq2"]  
  

#pass reference genomes/transcripromes
#REF = ["GTX0501", "Xp_jgi"]
REF = ["GTX0501"]


rule all:
    input:
    	"analysis_and_temp_files/06_annotate_lecanoro/kallisto_mapping/kallisto_palign_report.txt"

rule kallisto:
    input: 
    	index="analysis_and_temp_files/06_annotate_lecanoro/{ref}_pred/annotate_results/{ref}.mrna-transcripts.idx",
    	fq1=fq1_from_sample,
    	fq2=fq2_from_sample
    output: 
        abund="analysis_and_temp_files/06_annotate_lecanoro/kallisto_mapping/{sample}_to_{ref}/abundance.tsv",
        report="analysis_and_temp_files/06_annotate_lecanoro/kallisto_mapping/{sample}_to_{ref}/run_info.json"
    params:
        mem = "6G",
        queue="tsl-short"
    threads: 6
    shell: "bash code/kallisto.sh {input.index} 6 100 {input.fq1} {input.fq2} {output.abund}"    
        
        
rule kallisto_palign_extract:
    '''creates a file listing p_unique stat from each kallisto report'''
    input:
        i="analysis_and_temp_files/06_annotate_lecanoro/kallisto_mapping/{sample}_to_{ref}/run_info.json"
    output: o=temp("analysis_and_temp_files/06_annotate_lecanoro/kallisto_mapping/{sample}_to_{ref}/p_unique.txt")
    params:
        mem = "1G",
        queue="tsl-short"   
    threads: 1
    run:
        with open (input.i,'r') as r:
            data = json.loads(r.read())
            count=str(data['p_unique'])
            result=str(wildcards.sample+'\t'+wildcards.ref+'\t'+count+'\n')
        with open (output.o,'w') as out: out.write(result)
    
rule kallisto_palign_report:
    '''creates a single report file of p_unique stat from each kallisto report'''
    input: 
        expand("analysis_and_temp_files/06_annotate_lecanoro/kallisto_mapping/{sample}_to_{ref}/p_unique.txt",ref=REF,sample=SAMPLES)
    output:	"analysis_and_temp_files/06_annotate_lecanoro/kallisto_mapping/kallisto_palign_report.txt"
    params:
        mem = "1G",
        queue="tsl-short"   
    threads: 1
    shell:
        "cat {input} > {output};"
